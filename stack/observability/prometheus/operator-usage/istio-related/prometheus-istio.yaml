---
# Ref: https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: istio
spec:
  replicas: 2
  podMetadata:
    labels:
      app.kubernetes.io/name: prometheus-istio
    # Taken from https://istio.io/latest/docs/ops/integrations/prometheus/
    annotations:
      sidecar.istio.io/inject: "true"
      traffic.sidecar.istio.io/includeInboundPorts: "" # do not intercept any inbound ports
      traffic.sidecar.istio.io/includeOutboundIPRanges: "" # do not intercept any outbound traffic
      proxy.istio.io/config:
        | # configure an env variable `OUTPUT_CERTS` to write certificates to the given folder
        proxyMetadata:
          OUTPUT_CERTS: /etc/istio-output-certs
      sidecar.istio.io/userVolume: '[{"name": "istio-certs", "emptyDir": {"medium":"Memory"}}]' # mount the shared volume
      sidecar.istio.io/userVolumeMount: '[{"name": "istio-certs", "mountPath": "/etc/istio-output-certs"}]'

  # TODO: Configure DNS and ingress to be able to connect
  externalUrl: http://localhost
  routePrefix: "/prometheus"

  serviceAccountName: prometheus-istio

  retention: "10d"
  # portName: web

  thanos:
    baseImage: quay.io/thanos/thanos
    version: v0.18.0
    objectStorageConfig:
      name: thanos-storage-config
      key: thanos-storage.yaml

  serviceMonitorNamespaceSelector: {} # auto discovers all service monitors across all namespaces
  serviceMonitorSelector: {} # auto discovers all service monitors in namespaces configured one line above
  ruleNamespaceSelector: {} # auto discovers all prometheus rules across all namespaces
  ruleSelector: {} # auto discovers all prometheus rules in namespaces configured one line above

  additionalScrapeConfigs:
    key: istio-scrape-configs.yaml
    name: istio-scrape-configs

  # Taken from https://istio.io/latest/docs/ops/integrations/prometheus/
  volumeMounts:
    - mountPath: /etc/prom-certs/
      name: istio-certs

  volumes:
    - name: istio-certs
      emptyDir: {}

  # affinity:
  #   podAntiAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       - topologyKey: kubernetes.io/hostname
  #         labelSelector:
  #           matchLabels:
  #             app.kubernetes.io/name: prometheus-istio

# ---
# apiVersion: monitoring.coreos.com/v1
# kind: ThanosRuler
# metadata:
#   name: istio-thanos-ruler
#   labels:
#     example: thanos-ruler
#   namespace: thanos
# spec:
#   image: quay.io/thanos/thanos
#   ruleSelector:
#     matchLabels:
#       role: my-thanos-rules
#   queryEndpoints:
#     - dnssrv+_http._tcp.my-thanos-querier.monitoring.svc.cluster.local

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-istio
  labels:
    app.kubernetes.io/name: prometheus-istio
spec:
  type: ClusterIP
  ports:
    - name: web
      port: 9090
      targetPort: 9090
    - name: grpc
      port: 10901
      targetPort: 10901
  selector:
    app.kubernetes.io/name: prometheus-istio
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: prometheus-istio
  labels:
    app.kubernetes.io/name: prometheus-istio
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-istio
# # Ensure Thanos Querier will be connecting to Prometheus Pods without mTLS
# ---
# apiVersion: networking.istio.io/v1beta1
# kind: DestinationRule
# metadata:
#   name: prometheus-istio-inbound
# spec:
#   host: prometheus-istio.prometheus.svc.cluster.local
#   trafficPolicy:
#     tls:
#       mode: DISABLE
# ---
# apiVersion: networking.istio.io/v1alpha3
# kind: VirtualService
# metadata:
#   name: prometheus-istio-inbound
# spec:
#   hosts:
#     - prometheus-istio.prometheus.svc.cluster.local
#   gateways:
#     - mesh
#   http:
#     - route:
#         - destination:
#             host: prometheus-istio.prometheus.svc.cluster.local
